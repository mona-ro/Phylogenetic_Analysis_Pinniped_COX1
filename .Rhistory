install.packages("tidyverse")
library(tidyverse)
install.packages(
c("arrow", "babynames", "curl", "duckdb", "gapminder",
"ggrepel", "ggridges", "ggthemes", "hexbin", "janitor", "Lahman",
"leaflet", "maps", "nycflights13", "openxlsx", "palmerpenguins",
"repurrrsive", "tidymodels", "writexl")
)
1 + 2
library(palmerpenguins)
library(palmerpenguins)
penguins
glimpse(penguins)
View(penguins)
ggplot(data = penguins)
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
)
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point()
#> Warning: Removed 2 rows containing missing values or values outside the scale range
#> (`geom_point()`).
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)
) +
geom_point()
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point(mapping = aes(color = species)) +
geom_smooth(method = "lm")
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point(aes(color = species, shape = species)) +
geom_smooth(method = "lm") +
labs(
title = "Body mass and flipper length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Flipper length (mm)", y = "Body mass (g)",
color = "Species", shape = "Species"
) +
scale_color_colorblind()
install.packages("ggthemes")
library(ggthemes)
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point(aes(color = species, shape = species)) +
geom_smooth(method = "lm") +
labs(
title = "Body mass and flipper length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Flipper length (mm)", y = "Body mass (g)",
color = "Species", shape = "Species"
) +
scale_color_colorblind()
?penguins
ggplot(
+     data = penguins,
ggplot(
+     data = penguins,
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point(aes(color = species, shape = species)) +
geom_smooth(method = "lm") +
labs(
title = "Body mass and flipper length",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Flipper length (mm)", y = "Body mass (g)",
color = "Species", shape = "Species"
) +
scale_color_colorblind()
ggplot(
data = penguins,
mapping = aes(x = bill_depth_mm, y = bill_length_mm)
) +
geom_point(aes(color = species, shape = species)) +
geom_smooth(method = "lm") +
labs(
title = "Bill depth and length",
subtitle = "Bill Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Bill depth (mm)", y = "Bill length (mm)",
color = "Species", shape = "Species"
) +
scale_color_colorblind()
ggplot(
data = penguins,
mapping = aes(x = species, y = bill_depth_mm)
) +
geom_point(aes(color = species, shape = species)) +
geom_smooth(method = "lm") +
labs(
title = "Species and bill depth",
subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
x = "Species", y = "Bill depth (mm)",
color = "Species", shape = "Species"
) +
scale_color_colorblind()
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g, color = island)
) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point() +
geom_smooth()
ggplot() +
geom_point(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_smooth(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
)
ggplot(
data = penguins,
mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
geom_point()
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point()
penguins |>
ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point()
ggplot(penguins, aes(x = species)) +
geom_bar()
ggplot(penguins, aes(x = fct_infreq(species))) +
geom_bar()
ggplot(penguins, aes(x = body_mass_g)) +
geom_histogram(binwidth = 200)
ggplot(penguins, aes(x = body_mass_g)) +
geom_histogram(binwidth = 20)
ggplot(penguins, aes(x = body_mass_g)) +
geom_histogram(binwidth = 2000)
ggplot(penguins, aes(x = body_mass_g)) +
geom_density()
ggplot(penguins, aes(x = species)) +
geom_bar(color = "red")
ggplot(penguins, aes(x = species)) +
geom_bar(fill = "red")
ggplot(penguins, aes(x = species)) +
geom_bar(color = "red")
ggplot(penguins, aes(x = species, y = body_mass_g)) +
geom_boxplot()
ggplot(penguins, aes(x = island, fill = species)) +
geom_bar()
1 / 200 * 30
x <- "hello
install.packages("BiocManager")
BiocManager::install("Biostrings")
library(Biostrings)
??Biostrings
seqA <- DNAString(‘GTATCGA’)
seqA <- DNAString(‘GTATCGA’)
seqA <- DNAString("GTATCGA")
seqB <- DNAString("GTCTA")
?pairwiseAlignment
mat <- nucleotideSubstitutionMatrix(match = 1, mismatch = 0)
BiocManager::install("pwalign")
mat <- nucleotideSubstitutionMatrix(match = 1, mismatch = 0)
globalAlign <- pairwiseAlignment(seqA, seqB, type = ‘global’,
globalAlign <- pairwiseAlignment(seqA, seqB, type = "global",
substitutionMatrix = mat, gapOpening = 0, gapExtension = 1)
View(globalAlign)
View(globalAlign)
View(mat)
View(mat)
globalAlign
globalAlign <- pairwiseAlignment(seqA, seqB, type = "global",
substitutionMatrix = mat, gapOpening = 1, gapExtension = 0)
globalAlign
globalAlign <- pairwiseAlignment(seqA, seqB, type = "global",
+                                  substitutionMatrix = mat, gapOpening = 0, gapExtension = 1)
globalAlign
globalAlign <- pairwiseAlignment(seqA, seqB, type = "global",
+                                  substitutionMatrix = mat, gapOpening = 0, gapExtension = 1)
globalAlign <- pairwiseAlignment(seqA, seqB, type = "global",
+                                  substitutionMatrix = mat, gapOpening = 0, gapExtension = 1)
globalAlign
globalAlign <- pwalign::pairwiseAlignment(seqA, seqB, type = "global", substitutionMatrix = mat, gapOpening = 0, gapExtension = 1)
globalAlign
health _ data <- data . frame (Months = c (3; 4; 11; 15; 16; 17; 22; 44; 37; 16; 14; 24; 25; 15; 26; 27; 33; 29; 35; 44; 13; 21; 22; 10; 12; 8; 40; 32; 26; 27; 31; 34; 29; 17; 8; 24; 18; 47; 33; 34))
health_data <- data.frame (Months = c (3; 4; 11; 15; 16; 17; 22; 44; 37; 16; 14; 24; 25; 15; 26; 27; 33; 29; 35; 44; 13; 21; 22; 10; 12; 8; 40; 32; 26; 27; 31; 34; 29; 17; 8; 24; 18; 47; 33; 34))
health_data <- data.frame (Months = c (3, 4, 11, 15, 16, 17, 22, 44, 37, 16, 14, 24, 25, 15, 26, 27, 33, 29, 35, 44, 13, 21, 22, 10, 12, 8, 40, 32, 26, 27, 31, 34, 29, 17, 8, 24, 18, 47, 33, 34))
hist (health_data$Months, col="lightgreen", main=" Length of time in months patients live
once they start the treatmen", xlab= "Patient")
Survival_time <- c(
3, 4, 11, 15, 16, 17, 22, 44, 37, 16, 14, 24, 25, 15, 26, 27, 33, 29, 35, 44,
13, 21, 22, 10, 12, 8, 40, 32, 26, 27, 31, 34, 29, 17, 8, 24, 18, 47, 33, 34)
hist(Survival_time,
main = "Histogram of Survival Time",
xlab = "Survival Time (months)",
ylab = "Frequency")
hist(Survival_time,
main = "Histogram of Survival Time",
xlab = "Survival Time (months)",
ylab = "Frequency",
col = "forestgreen")
hist(Survival_time,
main = "Survival Time (Months) After AIDS Antibody Treatment",
xlab = "Survival Time (months)",
ylab = "Number of Patients",
col = "forestgreen")
hist(Survival_time,
main = "Survival Time After AIDS Antibody Treatment",
xlab = "Survival Time (months)",
ylab = "Number of Patients",
col = "forestgreen")
boxplot(Survival_time,
main = "Box Plot of Survival Time After AIDS Antibody Treatment",
ylab = "Survival Time (months)")
boxplot(Survival_time,
+         main = "Box Plot of Survival Time After AIDS Antibody Treatment",
boxplot(Survival_time,
main = "Box Plot of Survival Time After AIDS Antibody Treatment",
ylab = "Survival Time (months)",
col = "green")
boxplot(Survival_time,
main = "Box Plot of Survival Time After AIDS Antibody Treatment",
ylab = "Survival Time (months)",
col = "forestgreen")
median(Survival_time)
quantile(Survival_time, 0.25)
quantile(Survival_time, 0.75)
mean(Survival_time)
sd(Survival_time)
A_data <- c(3, 4, 11, 15, 16, 17, 22, 44, 37, 16, 14, 24, 25, 15, 26, 27, 33, 29, 35, 44,
13, 21, 22, 10, 12, 8, 40, 32, 26, 27, 31, 34, 29, 17, 8, 24, 18, 47, 33, 34)
mean(A_data)
B_data <- c(3, 14, 11, 5, 16, 17, 28, 41, 31, 18, 14, 14, 26, 25, 21, 22, 31, 2, 35, 44,
23, 21, 21, 16, 12, 18, 41, 22, 16, 25, 33, 34, 29, 13, 18, 24, 23, 59, 63, 89)
mean_A <- mean(A_data)
sd_A <- sd(A_data)
mean_B <- mean(B_data)
sd_B <- sd(B_data)
z_A <- (11 - mean_A) / sd_A
z_B <- (11 - mean_B) / sd_B
mean_A
sd_A
z_A
mean_B
sd_B
z_B
# Load required packages
library(msa)
library(phangorn)
library(Biostrings)
# Set working directory
setwd("~/Documents/Phylogenetic Analysis of Pinniped COX1 Genes")
# -------------------------------
# Load initial sequences and perform MSA
# -------------------------------
Pinniped_data <- readDNAStringSet("Pinnipeds_initdata.txt")
Pinniped_msa <- msa(Pinniped_data)
Pinniped_phyDat <- as.phyDat(Pinniped_msa)
# Compute pairwise distances and construct NJ tree
Pinniped_dm <- dist.ml(Pinniped_phyDat, model = "F81")
Pinniped_tree <- NJ(Pinniped_dm)
plot.phylo(Pinniped_tree, cex = 0.7, main="NJ Tree - Initial Pinniped Dataset")
# -------------------------------
# Load additional sequences and perform updated MSA
# -------------------------------
New_Pinniped_data <- readDNAStringSet("Pinnipeds_newdata.txt")
New_pinniped_msa <- msa(New_Pinniped_data)
New_pinniped_phyDat <- as.phyDat(New_pinniped_msa)
# NJ tree for updated dataset
New_pinniped_dm <- dist.ml(New_pinniped_phyDat, model="F81")
New_pinniped_tree <- NJ(New_pinniped_dm)
plot.phylo(New_pinniped_tree, cex = 0.7, main="NJ Tree - Updated Dataset")
# -------------------------------
# Maximum Likelihood tree with model selection
# -------------------------------
# Perform model testing
mt <- modelTest(New_pinniped_phyDat, model = c("JC", "F81", "K80", "HKY", "SYM", "GTR"))
best_model <- mt$Model[which.min(mt$AICc)]
env <- attr(mt, "env")
fitStart <- eval(get(best_model, env), env)
# Optimize the phylogenetic model
fit <- optim.pml(fitStart, rearrangement = "stochastic", optGamma=TRUE, optInv=TRUE, model=best_model)
# Load required packages
library(msa)
library(phangorn)
library(Biostrings)
# Set working directory
setwd("~/Documents/Phylogenetic Analysis of Pinniped COX1 Genes")
# -------------------------------
# Load initial sequences and perform MSA
# -------------------------------
Pinniped_data <- readDNAStringSet("Pinnipeds_initdata.txt")
Pinniped_msa <- msa(Pinniped_data)
Pinniped_phyDat <- as.phyDat(Pinniped_msa)
# Compute pairwise distances and construct NJ tree
Pinniped_dm <- dist.ml(Pinniped_phyDat, model = "F81")
Pinniped_tree <- NJ(Pinniped_dm)
plot.phylo(Pinniped_tree, cex = 0.7, main="NJ Tree - Initial Pinniped Dataset")
# -------------------------------
# Load additional sequences and perform updated MSA
# -------------------------------
New_Pinniped_data <- readDNAStringSet("Pinnipeds_newdata.txt")
New_pinniped_msa <- msa(New_Pinniped_data)
New_pinniped_phyDat <- as.phyDat(New_pinniped_msa)
# NJ tree for updated dataset
New_pinniped_dm <- dist.ml(New_pinniped_phyDat, model="F81")
New_pinniped_tree <- NJ(New_pinniped_dm)
plot.phylo(New_pinniped_tree, cex = 0.7, main="NJ Tree - Updated Dataset")
# -------------------------------
# Maximum Likelihood tree with model selection
# -------------------------------
# Perform model testing
mt <- modelTest(New_pinniped_phyDat, model = c("JC", "F81", "K80", "HKY", "SYM", "GTR"))
best_model <- mt$Model[which.min(mt$AICc)]
env <- attr(mt, "env")
fitStart <- eval(get(best_model, env), env)
# Optimize the phylogenetic model
fit <- optim.pml(fitStart, rearrangement = "stochastic", optGamma=TRUE, optInv=TRUE, model=best_model)
sink("new_msa_output.txt")
print(New_pinniped_msa, show="complete")
sink()
# NJ tree
png("NJ_tree.png", width=800, height=600)
plot.phylo(New_pinniped_tree, cex=0.7)
dev.off()
# ML tree with bootstrap
png("ML_tree.png", width=800, height=600)
plotBS(midpoint(fit$tree), bs, p = 50, type="p", cex=0.6)
png("NJ_tree.png", width = 2000, height = 1500, res = 300)  # larger size + higher dpi
plot.phylo(New_pinniped_tree, cex = 1)  # increase cex for bigger text
dev.off()
mt <- modelTest(New_pinniped_phyDat, model = c("JC", "F81", "K80", "HKY", "SYM", "GTR"))
best_model <- as.character(mt$Model[which.min(mt$AICc)])
best_model <- gsub("\\+.*", "", best_model)  # remove +G+I if present
# Initialize model
fitStart <- eval(get(best_model, attr(mt, "env")), attr(mt, "env"))
# Optimize the ML tree
fit <- optim.pml(fitStart, rearrangement = "stochastic", optGamma=TRUE, optInv=TRUE, model=best_model)
# Bootstrap
bs <- bootstrap.pml(fit, bs = 100, optNni = TRUE)
png("ML_tree.png", width=2000, height=1500, res=300)
plotBS(midpoint(fit$tree), bs, p = 50, type="p", cex=0.8)
dev.off()
